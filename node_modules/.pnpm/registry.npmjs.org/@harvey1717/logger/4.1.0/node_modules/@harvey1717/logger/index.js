const chalk = require('chalk');

class Logger {
  log(msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.yellow('LOG')}] - ${chalk.yellow(msg)}`
    );
  }
  success(msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.green('SUC')}] - ${chalk.green(msg)}`
    );
  }
  message(msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.blue('MSG')}] - ${chalk.blue(msg)}`
    );
  }
  error(msg) {
    console.error(
      `[${chalk.yellow(getTime())}] [${chalk.red('ERR')}] - ${chalk.red(msg)}`
    );
  }
  warn(msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.magenta('WRN')}] - ${chalk.magenta(msg)}`
    );
  }
  magenta(msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.magenta('MSG')}] - ${chalk.magenta(msg)}`
    );
  }
  cyan(msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.cyan('MSG')}] - ${chalk.cyan(msg)}`
    );
  }
  mlog(msg1, msg2) {
    this.log(`[ ${msg1} ] --> ${msg2}`);
  }
  msuccess(msg1, msg2) {
    this.success(`[ ${msg1} ] --> ${msg2}`);
  }
  mmessage(msg1, msg2) {
    this.message(`[ ${msg1} ] --> ${msg2}`);
  }
  merror(msg1, msg2) {
    this.error(`[ ${msg1} ] --> ${msg2}`);
  }
  mwarn(msg1, msg2) {
    this.warn(`[ ${msg1} ] --> ${msg2}`);
  }
}

class OldLogger {
  log(msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.yellow('LOG')}] ${chalk.yellow(msg)}`
    );
  }
  tlog(taskNum, msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.yellow('LOG')}] ${chalk.white(
        `[${taskNum}]`
      )} ${chalk.yellow(msg)}`
    );
  }
  mlog(taskMsg, msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.yellow('LOG')}] ${chalk.white(
        `[${taskMsg}]`
      )} ${chalk.yellow(msg)}`
    );
  }
  success(msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.green('SUC')}] ${chalk.green(msg)}`
    );
  }
  tsuccess(taskNum, msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.green('SUC')}] ${chalk.white(
        `[${taskNum}]`
      )} ${chalk.green(msg)}`
    );
  }
  msuccess(taskMsg, msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.green('SUC')}] ${chalk.white(
        `[${taskMsg}]`
      )} ${chalk.green(msg)}`
    );
  }
  error(msg) {
    console.log(`[${chalk.yellow(getTime())}] [${chalk.red('ERR')}] ${chalk.red(msg)}`);
  }
  terror(taskNum, msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.red('ERR')}] ${chalk.white(
        `[${taskNum}]`
      )} ${chalk.red(msg)}`
    );
  }
  merror(taskMsg, msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.red('ERR')}] ${chalk.white(
        `[${taskMsg}]`
      )} ${chalk.red(msg)}`
    );
  }
  warn(msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.magenta('WRN')}] ${chalk.magenta(msg)}`
    );
  }
  twarn(taskNum, msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.magenta('WRN')}] ${chalk.white(
        `[${taskNum}]`
      )} ${chalk.magenta(msg)}`
    );
  }
  mwarn(taskMsg, msg) {
    console.log(
      `[${chalk.yellow(getTime())}] [${chalk.magenta('WRN')}] ${chalk.white(
        `[${taskMsg}]`
      )} ${chalk.magenta(msg)}`
    );
  }
}

function getTime() {
  const date = new Date();
  return `${addZero(date.getHours())}:${addZero(date.getMinutes())}:${addZero(
    date.getSeconds()
  )}:${addZerosB(date.getMilliseconds())}`;
}

function addZero(i) {
  if (i < 10) {
    i = '0' + i;
  }
  return i;
}

function addZerosB(i) {
  if (i < 10) {
    i = '00' + i;
  } else if (i < 100) {
    i = '0' + i;
  }
  return i;
}

module.exports = function() {
  return new Logger();
};
